"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-+(=ifpj0&qby2^*3(vg+n%jc!3a*^=-g@80wytem&2$9dybmes"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", "1"))

ALLOWED_HOSTS = ["imtihon.divspan.uz", "127.0.0.1", "django", "localhost"]


# Application definition

INSTALLED_APPS = [
    "unfold",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_yasg",
    "rest_framework",
    "rest_framework_simplejwt",
    "professors",
    "students",
    "university",
    "assignments",
    "course",
    "accounts",
    "django_cleanup.apps.CleanupConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


if not DEBUG:

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("DB_NAME", "imtihon_db"),
            "USER": os.getenv("DB_USER", "imtihon_user"),
            "PASSWORD": os.getenv("DB_PASSWORD", "imtihon_pass"),
            "HOST": os.getenv("DB_HOST", "localhost"),
            "PORT": os.getenv("DB_PORT", "5432"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Tashkent"


USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "/app/static"

MEDIA_URL = "/media/"
MEDIA_ROOT = "/app/media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# swagger settings

SWAGGER_SETTINGS = {
    "USE_SESSION_AUTH": False,
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer <token>'",
        }
    },
    "OPERATIONS_SORTER": "alpha",
    "TAGS_SORTER": "alpha",
    "DOC_EXPANSION": "none",
    "DEFAULT_MODEL_RENDERING": "example",
    "DEEP_LINKING": True,
    "DISPLAY_OPERATION_ID": False,
    "DEFAULT_INFO": None,
    "SUPPORTED_SUBMIT_METHODS": ["get", "post", "put", "delete", "patch"],
    "TAGS": [
        {"name": "Universities", "description": "Manage universities"},
        {"name": "Faculties", "description": "Manage faculties within universities"},
        {"name": "Departments", "description": "Manage departments within faculties"},
        {
            "name": "Student Groups",
            "description": "Manage student groups within departments",
        },
        {"name": "Subjects", "description": "Manage academic subjects"},
        {"name": "Courses", "description": "Manage courses and course structure"},
        {
            "name": "Professor Profiles",
            "description": "Manage professor profiles and information",
        },
        {
            "name": "Professor Subjects",
            "description": "Manage professor-subject teaching assignments",
        },
        {
            "name": "Students",
            "description": "Manage students (see Student Profiles, Groups, Courses, etc.)",
        },
        {
            "name": "Student Profiles",
            "description": "Manage student profiles and personal information",
        },
        {"name": "Student Courses", "description": "Manage student course enrollments"},
        {"name": "Student Progress", "description": "Track student course progress"},
        {
            "name": "Student Sessions",
            "description": "Monitor student sessions for integrity",
        },
        {
            "name": "Cheating Evidence",
            "description": "Manage cheating evidence and academic violations",
        },
        {
            "name": "Student Answers",
            "description": "Manage student answers to assignments",
        },
        {
            "name": "Student Timetables",
            "description": "Manage student academic timetables",
        },
        {
            "name": "Timetable Subjects",
            "description": "Manage subject-specific timetable entries",
        },
        {"name": "Assignments", "description": "Assignment-related endpoints"},
        {
            "name": "Assignment Groups",
            "description": "Manage assignment-group associations",
        },
        {"name": "Questions", "description": "Manage assignment questions"},
        {
            "name": "Question Choices",
            "description": "Manage choices for assignment questions",
        },
    ],
}


# unfold settings


from core.unfold_config import UNFOLD


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),  # ‚è± Change this to any value
    "REFRESH_TOKEN_LIFETIME": timedelta(days=10),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),  # Needed for Authorization: Bearer <token>
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
}
